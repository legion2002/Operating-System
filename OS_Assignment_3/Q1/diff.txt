diff -ruN /home/kern/build/origKernel/linux-5.14.4/arch/x86/entry/syscalls/syscall_64.tbl /home/kern/build/modKernel/linux-5.14.4/arch/x86/entry/syscalls/syscall_64.tbl
--- /home/kern/build/origKernel/linux-5.14.4/arch/x86/entry/syscalls/syscall_64.tbl	2021-09-15 13:32:36.000000000 +0530
+++ /home/kern/build/modKernel/linux-5.14.4/arch/x86/entry/syscalls/syscall_64.tbl	2021-12-15 07:08:43.849945804 +0530
@@ -369,6 +369,7 @@
 445	common	landlock_add_rule	sys_landlock_add_rule
 446	common	landlock_restrict_self	sys_landlock_restrict_self
 447	common	memfd_secret		sys_memfd_secret
+448 common  increase_delay      sys_increase_delay
 
 #
 # Due to a historical design error, certain syscalls are numbered differently
diff -ruN /home/kern/build/origKernel/linux-5.14.4/include/linux/sched.h /home/kern/build/modKernel/linux-5.14.4/include/linux/sched.h
--- /home/kern/build/origKernel/linux-5.14.4/include/linux/sched.h	2021-09-15 13:32:36.000000000 +0530
+++ /home/kern/build/modKernel/linux-5.14.4/include/linux/sched.h	2021-12-15 07:07:12.249953060 +0530
@@ -468,11 +468,13 @@
 	struct rb_node			run_node;
 	struct list_head		group_node;
 	unsigned int			on_rq;
+	int				user_flag;
 
 	u64				exec_start;
 	u64				sum_exec_runtime;
 	u64				vruntime;
 	u64				prev_sum_exec_runtime;
+	u64				user_delay;
 
 	u64				nr_migrations;
 
diff -ruN /home/kern/build/origKernel/linux-5.14.4/kernel/sched/core.c /home/kern/build/modKernel/linux-5.14.4/kernel/sched/core.c
--- /home/kern/build/origKernel/linux-5.14.4/kernel/sched/core.c	2021-09-15 13:32:36.000000000 +0530
+++ /home/kern/build/modKernel/linux-5.14.4/kernel/sched/core.c	2021-12-15 07:07:48.069950222 +0530
@@ -3956,6 +3956,7 @@
 	p->se.prev_sum_exec_runtime	= 0;
 	p->se.nr_migrations		= 0;
 	p->se.vruntime			= 0;
+	p->se.user_delay		= 0;
 	INIT_LIST_HEAD(&p->se.group_node);
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
diff -ruN /home/kern/build/origKernel/linux-5.14.4/kernel/sched/fair.c /home/kern/build/modKernel/linux-5.14.4/kernel/sched/fair.c
--- /home/kern/build/origKernel/linux-5.14.4/kernel/sched/fair.c	2021-09-15 13:32:36.000000000 +0530
+++ /home/kern/build/modKernel/linux-5.14.4/kernel/sched/fair.c	2021-12-15 07:06:35.496622643 +0530
@@ -810,8 +810,12 @@
 
 	curr->sum_exec_runtime += delta_exec;
 	schedstat_add(cfs_rq->exec_clock, delta_exec);
+	
 
 	curr->vruntime += calc_delta_fair(delta_exec, curr);
+	curr->vruntime += curr->user_delay;
+	
+
 	update_min_vruntime(cfs_rq);
 
 	if (entity_is_task(curr)) {
diff -ruN /home/kern/build/origKernel/linux-5.14.4/kernel/sys.c /home/kern/build/modKernel/linux-5.14.4/kernel/sys.c
--- /home/kern/build/origKernel/linux-5.14.4/kernel/sys.c	2021-09-15 13:32:36.000000000 +0530
+++ /home/kern/build/modKernel/linux-5.14.4/kernel/sys.c	2021-12-15 07:05:43.306626778 +0530
@@ -65,6 +65,7 @@
 #include <linux/nospec.h>
 
 #include <linux/kmsg_dump.h>
+#include <linux/sched.h>
 /* Move somewhere else to avoid recompiling? */
 #include <generated/utsrelease.h>
 
@@ -75,61 +76,61 @@
 #include "uid16.h"
 
 #ifndef SET_UNALIGN_CTL
-# define SET_UNALIGN_CTL(a, b)	(-EINVAL)
+#define SET_UNALIGN_CTL(a, b) (-EINVAL)
 #endif
 #ifndef GET_UNALIGN_CTL
-# define GET_UNALIGN_CTL(a, b)	(-EINVAL)
+#define GET_UNALIGN_CTL(a, b) (-EINVAL)
 #endif
 #ifndef SET_FPEMU_CTL
-# define SET_FPEMU_CTL(a, b)	(-EINVAL)
+#define SET_FPEMU_CTL(a, b) (-EINVAL)
 #endif
 #ifndef GET_FPEMU_CTL
-# define GET_FPEMU_CTL(a, b)	(-EINVAL)
+#define GET_FPEMU_CTL(a, b) (-EINVAL)
 #endif
 #ifndef SET_FPEXC_CTL
-# define SET_FPEXC_CTL(a, b)	(-EINVAL)
+#define SET_FPEXC_CTL(a, b) (-EINVAL)
 #endif
 #ifndef GET_FPEXC_CTL
-# define GET_FPEXC_CTL(a, b)	(-EINVAL)
+#define GET_FPEXC_CTL(a, b) (-EINVAL)
 #endif
 #ifndef GET_ENDIAN
-# define GET_ENDIAN(a, b)	(-EINVAL)
+#define GET_ENDIAN(a, b) (-EINVAL)
 #endif
 #ifndef SET_ENDIAN
-# define SET_ENDIAN(a, b)	(-EINVAL)
+#define SET_ENDIAN(a, b) (-EINVAL)
 #endif
 #ifndef GET_TSC_CTL
-# define GET_TSC_CTL(a)		(-EINVAL)
+#define GET_TSC_CTL(a) (-EINVAL)
 #endif
 #ifndef SET_TSC_CTL
-# define SET_TSC_CTL(a)		(-EINVAL)
+#define SET_TSC_CTL(a) (-EINVAL)
 #endif
 #ifndef GET_FP_MODE
-# define GET_FP_MODE(a)		(-EINVAL)
+#define GET_FP_MODE(a) (-EINVAL)
 #endif
 #ifndef SET_FP_MODE
-# define SET_FP_MODE(a,b)	(-EINVAL)
+#define SET_FP_MODE(a, b) (-EINVAL)
 #endif
 #ifndef SVE_SET_VL
-# define SVE_SET_VL(a)		(-EINVAL)
+#define SVE_SET_VL(a) (-EINVAL)
 #endif
 #ifndef SVE_GET_VL
-# define SVE_GET_VL()		(-EINVAL)
+#define SVE_GET_VL() (-EINVAL)
 #endif
 #ifndef PAC_RESET_KEYS
-# define PAC_RESET_KEYS(a, b)	(-EINVAL)
+#define PAC_RESET_KEYS(a, b) (-EINVAL)
 #endif
 #ifndef PAC_SET_ENABLED_KEYS
-# define PAC_SET_ENABLED_KEYS(a, b, c)	(-EINVAL)
+#define PAC_SET_ENABLED_KEYS(a, b, c) (-EINVAL)
 #endif
 #ifndef PAC_GET_ENABLED_KEYS
-# define PAC_GET_ENABLED_KEYS(a)	(-EINVAL)
+#define PAC_GET_ENABLED_KEYS(a) (-EINVAL)
 #endif
 #ifndef SET_TAGGED_ADDR_CTRL
-# define SET_TAGGED_ADDR_CTRL(a)	(-EINVAL)
+#define SET_TAGGED_ADDR_CTRL(a) (-EINVAL)
 #endif
 #ifndef GET_TAGGED_ADDR_CTRL
-# define GET_TAGGED_ADDR_CTRL()		(-EINVAL)
+#define GET_TAGGED_ADDR_CTRL() (-EINVAL)
 #endif
 
 /*
@@ -164,8 +165,7 @@
 {
 	const struct cred *cred = current_cred(), *pcred = __task_cred(p);
 
-	if (uid_eq(pcred->uid,  cred->euid) ||
-	    uid_eq(pcred->euid, cred->euid))
+	if (uid_eq(pcred->uid, cred->euid) || uid_eq(pcred->euid, cred->euid))
 		return true;
 	if (ns_capable(pcred->user_ns, CAP_SYS_NICE))
 		return true;
@@ -235,9 +235,11 @@
 			pgrp = find_vpid(who);
 		else
 			pgrp = task_pgrp(current);
-		do_each_pid_thread(pgrp, PIDTYPE_PGID, p) {
+		do_each_pid_thread(pgrp, PIDTYPE_PGID, p)
+		{
 			error = set_one_prio(p, niceval, error);
-		} while_each_pid_thread(pgrp, PIDTYPE_PGID, p);
+		}
+		while_each_pid_thread(pgrp, PIDTYPE_PGID, p);
 		break;
 	case PRIO_USER:
 		uid = make_kuid(cred->user_ns, who);
@@ -247,14 +249,16 @@
 		else if (!uid_eq(uid, cred->uid)) {
 			user = find_user(uid);
 			if (!user)
-				goto out_unlock;	/* No processes for this user */
+				goto out_unlock; /* No processes for this user */
 		}
-		do_each_thread(g, p) {
+		do_each_thread(g, p)
+		{
 			if (uid_eq(task_uid(p), uid) && task_pid_vnr(p))
 				error = set_one_prio(p, niceval, error);
-		} while_each_thread(g, p);
+		}
+		while_each_thread(g, p);
 		if (!uid_eq(uid, cred->uid))
-			free_uid(user);		/* For find_user() */
+			free_uid(user); /* For find_user() */
 		break;
 	}
 out_unlock:
@@ -270,6 +274,24 @@
  * has been offset by 20 (ie it returns 40..1 instead of -20..19)
  * to stay compatible.
  */
+
+SYSCALL_DEFINE2(increase_delay, unsigned long long, delay_val, int, currPID)
+{
+	struct pid *pidStruct = find_get_pid(currPID);
+	struct task_struct *mainStruct = pid_task(pidStruct, PIDTYPE_PID);
+	struct task_struct *newStruct;
+	printk("\n REACHED INCREASE DELAY SUCCESSFULLY\n");
+
+	printk("\n FOUND OUT MAINSTRUCT SUCCESFULLY\n");
+	printk("\nInitial Vruntime Value in increase_delay function %llu\n", mainStruct->se.vruntime);
+	mainStruct->se.user_delay = delay_val * 1000000;
+	mainStruct->se.vruntime += delay_val;
+	newStruct = pid_task(pidStruct, PIDTYPE_PID);
+
+	printk("\n This is the updated vruntime %llu \n",newStruct->se.vruntime);
+	return (mainStruct->se.vruntime);
+}
+
 SYSCALL_DEFINE2(getpriority, int, which, int, who)
 {
 	struct task_struct *g, *p;
@@ -301,11 +323,13 @@
 			pgrp = find_vpid(who);
 		else
 			pgrp = task_pgrp(current);
-		do_each_pid_thread(pgrp, PIDTYPE_PGID, p) {
+		do_each_pid_thread(pgrp, PIDTYPE_PGID, p)
+		{
 			niceval = nice_to_rlimit(task_nice(p));
 			if (niceval > retval)
 				retval = niceval;
-		} while_each_pid_thread(pgrp, PIDTYPE_PGID, p);
+		}
+		while_each_pid_thread(pgrp, PIDTYPE_PGID, p);
 		break;
 	case PRIO_USER:
 		uid = make_kuid(cred->user_ns, who);
@@ -315,17 +339,19 @@
 		else if (!uid_eq(uid, cred->uid)) {
 			user = find_user(uid);
 			if (!user)
-				goto out_unlock;	/* No processes for this user */
+				goto out_unlock; /* No processes for this user */
 		}
-		do_each_thread(g, p) {
+		do_each_thread(g, p)
+		{
 			if (uid_eq(task_uid(p), uid) && task_pid_vnr(p)) {
 				niceval = nice_to_rlimit(task_nice(p));
 				if (niceval > retval)
 					retval = niceval;
 			}
-		} while_each_thread(g, p);
+		}
+		while_each_thread(g, p);
 		if (!uid_eq(uid, cred->uid))
-			free_uid(user);		/* for find_user() */
+			free_uid(user); /* for find_user() */
 		break;
 	}
 out_unlock:
@@ -365,9 +391,9 @@
 	krgid = make_kgid(ns, rgid);
 	kegid = make_kgid(ns, egid);
 
-	if ((rgid != (gid_t) -1) && !gid_valid(krgid))
+	if ((rgid != (gid_t)-1) && !gid_valid(krgid))
 		return -EINVAL;
-	if ((egid != (gid_t) -1) && !gid_valid(kegid))
+	if ((egid != (gid_t)-1) && !gid_valid(kegid))
 		return -EINVAL;
 
 	new = prepare_creds();
@@ -376,17 +402,15 @@
 	old = current_cred();
 
 	retval = -EPERM;
-	if (rgid != (gid_t) -1) {
-		if (gid_eq(old->gid, krgid) ||
-		    gid_eq(old->egid, krgid) ||
+	if (rgid != (gid_t)-1) {
+		if (gid_eq(old->gid, krgid) || gid_eq(old->egid, krgid) ||
 		    ns_capable_setid(old->user_ns, CAP_SETGID))
 			new->gid = krgid;
 		else
 			goto error;
 	}
-	if (egid != (gid_t) -1) {
-		if (gid_eq(old->gid, kegid) ||
-		    gid_eq(old->egid, kegid) ||
+	if (egid != (gid_t)-1) {
+		if (gid_eq(old->gid, kegid) || gid_eq(old->egid, kegid) ||
 		    gid_eq(old->sgid, kegid) ||
 		    ns_capable_setid(old->user_ns, CAP_SETGID))
 			new->egid = kegid;
@@ -394,8 +418,8 @@
 			goto error;
 	}
 
-	if (rgid != (gid_t) -1 ||
-	    (egid != (gid_t) -1 && !gid_eq(kegid, old->gid)))
+	if (rgid != (gid_t)-1 ||
+	    (egid != (gid_t)-1 && !gid_eq(kegid, old->gid)))
 		new->sgid = new->egid;
 	new->fsgid = new->egid;
 
@@ -479,8 +503,9 @@
 	 * for programs doing set*uid()+execve() by harmlessly deferring the
 	 * failure to the execve() stage.
 	 */
-	if (is_ucounts_overlimit(new->ucounts, UCOUNT_RLIMIT_NPROC, rlimit(RLIMIT_NPROC)) &&
-			new_user != INIT_USER)
+	if (is_ucounts_overlimit(new->ucounts, UCOUNT_RLIMIT_NPROC,
+				 rlimit(RLIMIT_NPROC)) &&
+	    new_user != INIT_USER)
 		current->flags |= PF_NPROC_EXCEEDED;
 	else
 		current->flags &= ~PF_NPROC_EXCEEDED;
@@ -516,9 +541,9 @@
 	kruid = make_kuid(ns, ruid);
 	keuid = make_kuid(ns, euid);
 
-	if ((ruid != (uid_t) -1) && !uid_valid(kruid))
+	if ((ruid != (uid_t)-1) && !uid_valid(kruid))
 		return -EINVAL;
-	if ((euid != (uid_t) -1) && !uid_valid(keuid))
+	if ((euid != (uid_t)-1) && !uid_valid(keuid))
 		return -EINVAL;
 
 	new = prepare_creds();
@@ -527,18 +552,16 @@
 	old = current_cred();
 
 	retval = -EPERM;
-	if (ruid != (uid_t) -1) {
+	if (ruid != (uid_t)-1) {
 		new->uid = kruid;
-		if (!uid_eq(old->uid, kruid) &&
-		    !uid_eq(old->euid, kruid) &&
+		if (!uid_eq(old->uid, kruid) && !uid_eq(old->euid, kruid) &&
 		    !ns_capable_setid(old->user_ns, CAP_SETUID))
 			goto error;
 	}
 
-	if (euid != (uid_t) -1) {
+	if (euid != (uid_t)-1) {
 		new->euid = keuid;
-		if (!uid_eq(old->uid, keuid) &&
-		    !uid_eq(old->euid, keuid) &&
+		if (!uid_eq(old->uid, keuid) && !uid_eq(old->euid, keuid) &&
 		    !uid_eq(old->suid, keuid) &&
 		    !ns_capable_setid(old->user_ns, CAP_SETUID))
 			goto error;
@@ -549,8 +572,8 @@
 		if (retval < 0)
 			goto error;
 	}
-	if (ruid != (uid_t) -1 ||
-	    (euid != (uid_t) -1 && !uid_eq(keuid, old->uid)))
+	if (ruid != (uid_t)-1 ||
+	    (euid != (uid_t)-1 && !uid_eq(keuid, old->uid)))
 		new->suid = new->euid;
 	new->fsuid = new->euid;
 
@@ -636,7 +659,6 @@
 	return __sys_setuid(uid);
 }
 
-
 /*
  * This function implements a generic ability to update ruid, euid,
  * and suid.  This allows you to implement the 4.4 compatible seteuid().
@@ -653,13 +675,13 @@
 	keuid = make_kuid(ns, euid);
 	ksuid = make_kuid(ns, suid);
 
-	if ((ruid != (uid_t) -1) && !uid_valid(kruid))
+	if ((ruid != (uid_t)-1) && !uid_valid(kruid))
 		return -EINVAL;
 
-	if ((euid != (uid_t) -1) && !uid_valid(keuid))
+	if ((euid != (uid_t)-1) && !uid_valid(keuid))
 		return -EINVAL;
 
-	if ((suid != (uid_t) -1) && !uid_valid(ksuid))
+	if ((suid != (uid_t)-1) && !uid_valid(ksuid))
 		return -EINVAL;
 
 	new = prepare_creds();
@@ -670,18 +692,18 @@
 
 	retval = -EPERM;
 	if (!ns_capable_setid(old->user_ns, CAP_SETUID)) {
-		if (ruid != (uid_t) -1        && !uid_eq(kruid, old->uid) &&
+		if (ruid != (uid_t)-1 && !uid_eq(kruid, old->uid) &&
 		    !uid_eq(kruid, old->euid) && !uid_eq(kruid, old->suid))
 			goto error;
-		if (euid != (uid_t) -1        && !uid_eq(keuid, old->uid) &&
+		if (euid != (uid_t)-1 && !uid_eq(keuid, old->uid) &&
 		    !uid_eq(keuid, old->euid) && !uid_eq(keuid, old->suid))
 			goto error;
-		if (suid != (uid_t) -1        && !uid_eq(ksuid, old->uid) &&
+		if (suid != (uid_t)-1 && !uid_eq(ksuid, old->uid) &&
 		    !uid_eq(ksuid, old->euid) && !uid_eq(ksuid, old->suid))
 			goto error;
 	}
 
-	if (ruid != (uid_t) -1) {
+	if (ruid != (uid_t)-1) {
 		new->uid = kruid;
 		if (!uid_eq(kruid, old->uid)) {
 			retval = set_user(new);
@@ -689,9 +711,9 @@
 				goto error;
 		}
 	}
-	if (euid != (uid_t) -1)
+	if (euid != (uid_t)-1)
 		new->euid = keuid;
-	if (suid != (uid_t) -1)
+	if (suid != (uid_t)-1)
 		new->suid = ksuid;
 	new->fsuid = new->euid;
 
@@ -715,7 +737,8 @@
 	return __sys_setresuid(ruid, euid, suid);
 }
 
-SYSCALL_DEFINE3(getresuid, uid_t __user *, ruidp, uid_t __user *, euidp, uid_t __user *, suidp)
+SYSCALL_DEFINE3(getresuid, uid_t __user *, ruidp, uid_t __user *, euidp,
+		uid_t __user *, suidp)
 {
 	const struct cred *cred = current_cred();
 	int retval;
@@ -749,11 +772,11 @@
 	kegid = make_kgid(ns, egid);
 	ksgid = make_kgid(ns, sgid);
 
-	if ((rgid != (gid_t) -1) && !gid_valid(krgid))
+	if ((rgid != (gid_t)-1) && !gid_valid(krgid))
 		return -EINVAL;
-	if ((egid != (gid_t) -1) && !gid_valid(kegid))
+	if ((egid != (gid_t)-1) && !gid_valid(kegid))
 		return -EINVAL;
-	if ((sgid != (gid_t) -1) && !gid_valid(ksgid))
+	if ((sgid != (gid_t)-1) && !gid_valid(ksgid))
 		return -EINVAL;
 
 	new = prepare_creds();
@@ -763,22 +786,22 @@
 
 	retval = -EPERM;
 	if (!ns_capable_setid(old->user_ns, CAP_SETGID)) {
-		if (rgid != (gid_t) -1        && !gid_eq(krgid, old->gid) &&
+		if (rgid != (gid_t)-1 && !gid_eq(krgid, old->gid) &&
 		    !gid_eq(krgid, old->egid) && !gid_eq(krgid, old->sgid))
 			goto error;
-		if (egid != (gid_t) -1        && !gid_eq(kegid, old->gid) &&
+		if (egid != (gid_t)-1 && !gid_eq(kegid, old->gid) &&
 		    !gid_eq(kegid, old->egid) && !gid_eq(kegid, old->sgid))
 			goto error;
-		if (sgid != (gid_t) -1        && !gid_eq(ksgid, old->gid) &&
+		if (sgid != (gid_t)-1 && !gid_eq(ksgid, old->gid) &&
 		    !gid_eq(ksgid, old->egid) && !gid_eq(ksgid, old->sgid))
 			goto error;
 	}
 
-	if (rgid != (gid_t) -1)
+	if (rgid != (gid_t)-1)
 		new->gid = krgid;
-	if (egid != (gid_t) -1)
+	if (egid != (gid_t)-1)
 		new->egid = kegid;
-	if (sgid != (gid_t) -1)
+	if (sgid != (gid_t)-1)
 		new->sgid = ksgid;
 	new->fsgid = new->egid;
 
@@ -798,7 +821,8 @@
 	return __sys_setresgid(rgid, egid, sgid);
 }
 
-SYSCALL_DEFINE3(getresgid, gid_t __user *, rgidp, gid_t __user *, egidp, gid_t __user *, sgidp)
+SYSCALL_DEFINE3(getresgid, gid_t __user *, rgidp, gid_t __user *, egidp,
+		gid_t __user *, sgidp)
 {
 	const struct cred *cred = current_cred();
 	int retval;
@@ -818,7 +842,6 @@
 	return retval;
 }
 
-
 /*
  * "setfsuid()" sets the fsuid - the uid used for filesystem checks. This
  * is used for "access()" and for the NFS daemon (letting nfsd stay at
@@ -843,12 +866,13 @@
 	if (!new)
 		return old_fsuid;
 
-	if (uid_eq(kuid, old->uid)  || uid_eq(kuid, old->euid)  ||
+	if (uid_eq(kuid, old->uid) || uid_eq(kuid, old->euid) ||
 	    uid_eq(kuid, old->suid) || uid_eq(kuid, old->fsuid) ||
 	    ns_capable_setid(old->user_ns, CAP_SETUID)) {
 		if (!uid_eq(kuid, old->fsuid)) {
 			new->fsuid = kuid;
-			if (security_task_fix_setuid(new, old, LSM_SETID_FS) == 0)
+			if (security_task_fix_setuid(new, old, LSM_SETID_FS) ==
+			    0)
 				goto change_okay;
 		}
 	}
@@ -887,12 +911,13 @@
 	if (!new)
 		return old_fsgid;
 
-	if (gid_eq(kgid, old->gid)  || gid_eq(kgid, old->egid)  ||
+	if (gid_eq(kgid, old->gid) || gid_eq(kgid, old->egid) ||
 	    gid_eq(kgid, old->sgid) || gid_eq(kgid, old->fsgid) ||
 	    ns_capable_setid(old->user_ns, CAP_SETGID)) {
 		if (!gid_eq(kgid, old->fsgid)) {
 			new->fsgid = kgid;
-			if (security_task_fix_setgid(new,old,LSM_SETID_FS) == 0)
+			if (security_task_fix_setgid(new, old, LSM_SETID_FS) ==
+			    0)
 				goto change_okay;
 		}
 	}
@@ -995,7 +1020,7 @@
 			return -EFAULT;
 	}
 	force_successful_syscall_return();
-	return (long) jiffies_64_to_clock_t(get_jiffies_64());
+	return (long)jiffies_64_to_clock_t(get_jiffies_64());
 }
 
 #ifdef CONFIG_COMPAT
@@ -1228,12 +1253,12 @@
 DECLARE_RWSEM(uts_sem);
 
 #ifdef COMPAT_UTS_MACHINE
-#define override_architecture(name) \
-	(personality(current->personality) == PER_LINUX32 && \
-	 copy_to_user(name->machine, COMPAT_UTS_MACHINE, \
+#define override_architecture(name)                                            \
+	(personality(current->personality) == PER_LINUX32 &&                   \
+	 copy_to_user(name->machine, COMPAT_UTS_MACHINE,                       \
 		      sizeof(COMPAT_UTS_MACHINE)))
 #else
-#define override_architecture(name)	0
+#define override_architecture(name) 0
 #endif
 
 /*
@@ -1479,8 +1504,8 @@
 /*
  *	Back compatibility for getrlimit. Needed for some apps.
  */
-SYSCALL_DEFINE2(old_getrlimit, unsigned int, resource,
-		struct rlimit __user *, rlim)
+SYSCALL_DEFINE2(old_getrlimit, unsigned int, resource, struct rlimit __user *,
+		rlim)
 {
 	struct rlimit x;
 	if (resource >= RLIM_NLIMITS)
@@ -1559,7 +1584,7 @@
 
 /* make sure you are allowed to change @tsk limits before calling this */
 int do_prlimit(struct task_struct *tsk, unsigned int resource,
-		struct rlimit *new_rlim, struct rlimit *old_rlim)
+	       struct rlimit *new_rlim, struct rlimit *old_rlim)
 {
 	struct rlimit *rlim;
 	int retval = 0;
@@ -1570,7 +1595,7 @@
 		if (new_rlim->rlim_cur > new_rlim->rlim_max)
 			return -EINVAL;
 		if (resource == RLIMIT_NOFILE &&
-				new_rlim->rlim_max > sysctl_nr_open)
+		    new_rlim->rlim_max > sysctl_nr_open)
 			return -EPERM;
 	}
 
@@ -1587,10 +1612,11 @@
 		/* Keep the capable check against init_user_ns until
 		   cgroups can contain all limits */
 		if (new_rlim->rlim_max > rlim->rlim_max &&
-				!capable(CAP_SYS_RESOURCE))
+		    !capable(CAP_SYS_RESOURCE))
 			retval = -EPERM;
 		if (!retval)
-			retval = security_task_setrlimit(tsk, resource, new_rlim);
+			retval = security_task_setrlimit(tsk, resource,
+							 new_rlim);
 	}
 	if (!retval) {
 		if (old_rlim)
@@ -1605,9 +1631,9 @@
 	 * infinite. In case of RLIM_INFINITY the posix CPU timer code
 	 * ignores the rlimit.
 	 */
-	 if (!retval && new_rlim && resource == RLIMIT_CPU &&
-	     new_rlim->rlim_cur != RLIM_INFINITY &&
-	     IS_ENABLED(CONFIG_POSIX_TIMERS))
+	if (!retval && new_rlim && resource == RLIMIT_CPU &&
+	    new_rlim->rlim_cur != RLIM_INFINITY &&
+	    IS_ENABLED(CONFIG_POSIX_TIMERS))
 		update_rlimit_cpu(tsk, new_rlim->rlim_cur);
 out:
 	read_unlock(&tasklist_lock);
@@ -1627,7 +1653,7 @@
 	tcred = __task_cred(task);
 	id_match = (uid_eq(cred->uid, tcred->euid) &&
 		    uid_eq(cred->uid, tcred->suid) &&
-		    uid_eq(cred->uid, tcred->uid)  &&
+		    uid_eq(cred->uid, tcred->uid) &&
 		    gid_eq(cred->gid, tcred->egid) &&
 		    gid_eq(cred->gid, tcred->sgid) &&
 		    gid_eq(cred->gid, tcred->gid));
@@ -1672,7 +1698,7 @@
 	rcu_read_unlock();
 
 	ret = do_prlimit(tsk, resource, new_rlim ? &new : NULL,
-			old_rlim ? &old : NULL);
+			 old_rlim ? &old : NULL);
 
 	if (!ret && old_rlim) {
 		rlim_to_rlim64(&old, &old64);
@@ -1743,7 +1769,7 @@
 	u64 tgutime, tgstime, utime, stime;
 	unsigned long maxrss = 0;
 
-	memset((char *)r, 0, sizeof (*r));
+	memset((char *)r, 0, sizeof(*r));
 	utime = stime = 0;
 
 	if (who == RUSAGE_THREAD) {
@@ -1788,7 +1814,8 @@
 		t = p;
 		do {
 			accumulate_thread_rusage(t, r);
-		} while_each_thread(p, t);
+		}
+		while_each_thread(p, t);
 		break;
 
 	default:
@@ -1945,11 +1972,12 @@
 	/*
 	 * Make sure the pairs are ordered.
 	 */
-#define __prctl_check_order(__m1, __op, __m2)				\
-	((unsigned long)prctl_map->__m1 __op				\
-	 (unsigned long)prctl_map->__m2) ? 0 : -EINVAL
-	error  = __prctl_check_order(start_code, <, end_code);
-	error |= __prctl_check_order(start_data,<=, end_data);
+#define __prctl_check_order(__m1, __op, __m2)                                  \
+	((unsigned long)prctl_map->__m1 __op(unsigned long) prctl_map->__m2) ? \
+		0 :                                                            \
+		      -EINVAL
+	error = __prctl_check_order(start_code, <, end_code);
+	error |= __prctl_check_order(start_data, <=, end_data);
 	error |= __prctl_check_order(start_brk, <=, brk);
 	error |= __prctl_check_order(arg_start, <=, arg_end);
 	error |= __prctl_check_order(env_start, <=, env_end);
@@ -1972,7 +2000,7 @@
 	if (check_data_rlimit(rlimit(RLIMIT_DATA), prctl_map->brk,
 			      prctl_map->start_brk, prctl_map->end_data,
 			      prctl_map->start_data))
-			goto out;
+		goto out;
 
 	error = 0;
 out:
@@ -1980,9 +2008,12 @@
 }
 
 #ifdef CONFIG_CHECKPOINT_RESTORE
-static int prctl_set_mm_map(int opt, const void __user *addr, unsigned long data_size)
+static int prctl_set_mm_map(int opt, const void __user *addr,
+			    unsigned long data_size)
 {
-	struct prctl_mm_map prctl_map = { .exe_fd = (u32)-1, };
+	struct prctl_mm_map prctl_map = {
+		.exe_fd = (u32)-1,
+	};
 	unsigned long user_auxv[AT_VECTOR_SIZE];
 	struct mm_struct *mm = current->mm;
 	int error;
@@ -2009,7 +2040,7 @@
 		 * Someone is trying to cheat the auxv vector.
 		 */
 		if (!prctl_map.auxv ||
-				prctl_map.auxv_size > sizeof(mm->saved_auxv))
+		    prctl_map.auxv_size > sizeof(mm->saved_auxv))
 			return -EINVAL;
 
 		memset(user_auxv, 0, sizeof(user_auxv));
@@ -2059,17 +2090,17 @@
 	 */
 
 	spin_lock(&mm->arg_lock);
-	mm->start_code	= prctl_map.start_code;
-	mm->end_code	= prctl_map.end_code;
-	mm->start_data	= prctl_map.start_data;
-	mm->end_data	= prctl_map.end_data;
-	mm->start_brk	= prctl_map.start_brk;
-	mm->brk		= prctl_map.brk;
-	mm->start_stack	= prctl_map.start_stack;
-	mm->arg_start	= prctl_map.arg_start;
-	mm->arg_end	= prctl_map.arg_end;
-	mm->env_start	= prctl_map.env_start;
-	mm->env_end	= prctl_map.env_end;
+	mm->start_code = prctl_map.start_code;
+	mm->end_code = prctl_map.end_code;
+	mm->start_data = prctl_map.start_data;
+	mm->end_data = prctl_map.end_data;
+	mm->start_brk = prctl_map.start_brk;
+	mm->brk = prctl_map.brk;
+	mm->start_stack = prctl_map.start_stack;
+	mm->arg_start = prctl_map.arg_start;
+	mm->arg_end = prctl_map.arg_end;
+	mm->env_start = prctl_map.env_start;
+	mm->env_end = prctl_map.env_end;
 	spin_unlock(&mm->arg_lock);
 
 	/*
@@ -2118,8 +2149,8 @@
 	return 0;
 }
 
-static int prctl_set_mm(int opt, unsigned long addr,
-			unsigned long arg4, unsigned long arg5)
+static int prctl_set_mm(int opt, unsigned long addr, unsigned long arg4,
+			unsigned long arg5)
 {
 	struct mm_struct *mm = current->mm;
 	struct prctl_mm_map prctl_map = {
@@ -2130,8 +2161,7 @@
 	struct vm_area_struct *vma;
 	int error;
 
-	if (arg5 || (arg4 && (opt != PR_SET_MM_AUXV &&
-			      opt != PR_SET_MM_MAP &&
+	if (arg5 || (arg4 && (opt != PR_SET_MM_AUXV && opt != PR_SET_MM_MAP &&
 			      opt != PR_SET_MM_MAP_SIZE)))
 		return -EINVAL;
 
@@ -2163,17 +2193,17 @@
 	vma = find_vma(mm, addr);
 
 	spin_lock(&mm->arg_lock);
-	prctl_map.start_code	= mm->start_code;
-	prctl_map.end_code	= mm->end_code;
-	prctl_map.start_data	= mm->start_data;
-	prctl_map.end_data	= mm->end_data;
-	prctl_map.start_brk	= mm->start_brk;
-	prctl_map.brk		= mm->brk;
-	prctl_map.start_stack	= mm->start_stack;
-	prctl_map.arg_start	= mm->arg_start;
-	prctl_map.arg_end	= mm->arg_end;
-	prctl_map.env_start	= mm->env_start;
-	prctl_map.env_end	= mm->env_end;
+	prctl_map.start_code = mm->start_code;
+	prctl_map.end_code = mm->end_code;
+	prctl_map.start_data = mm->start_data;
+	prctl_map.end_data = mm->end_data;
+	prctl_map.start_brk = mm->start_brk;
+	prctl_map.brk = mm->brk;
+	prctl_map.start_stack = mm->start_stack;
+	prctl_map.arg_start = mm->arg_start;
+	prctl_map.arg_end = mm->arg_end;
+	prctl_map.env_start = mm->env_start;
+	prctl_map.env_end = mm->env_end;
 
 	switch (opt) {
 	case PR_SET_MM_START_CODE:
@@ -2236,17 +2266,17 @@
 		}
 	}
 
-	mm->start_code	= prctl_map.start_code;
-	mm->end_code	= prctl_map.end_code;
-	mm->start_data	= prctl_map.start_data;
-	mm->end_data	= prctl_map.end_data;
-	mm->start_brk	= prctl_map.start_brk;
-	mm->brk		= prctl_map.brk;
-	mm->start_stack	= prctl_map.start_stack;
-	mm->arg_start	= prctl_map.arg_start;
-	mm->arg_end	= prctl_map.arg_end;
-	mm->env_start	= prctl_map.env_start;
-	mm->env_end	= prctl_map.env_end;
+	mm->start_code = prctl_map.start_code;
+	mm->end_code = prctl_map.end_code;
+	mm->start_data = prctl_map.start_data;
+	mm->end_data = prctl_map.end_data;
+	mm->start_brk = prctl_map.start_brk;
+	mm->brk = prctl_map.brk;
+	mm->start_stack = prctl_map.start_stack;
+	mm->arg_start = prctl_map.arg_start;
+	mm->arg_end = prctl_map.arg_end;
+	mm->env_start = prctl_map.env_start;
+	mm->env_end = prctl_map.env_end;
 
 	error = 0;
 out:
@@ -2256,12 +2286,14 @@
 }
 
 #ifdef CONFIG_CHECKPOINT_RESTORE
-static int prctl_get_tid_address(struct task_struct *me, int __user * __user *tid_addr)
+static int prctl_get_tid_address(struct task_struct *me,
+				 int __user *__user *tid_addr)
 {
 	return put_user(me->clear_child_tid, tid_addr);
 }
 #else
-static int prctl_get_tid_address(struct task_struct *me, int __user * __user *tid_addr)
+static int prctl_get_tid_address(struct task_struct *me,
+				 int __user *__user *tid_addr)
 {
 	return -EINVAL;
 }
@@ -2277,8 +2309,7 @@
 	 * If we've found child_reaper - skip descendants in
 	 * it's subtree as they will never get out pidns.
 	 */
-	if (p->signal->has_child_subreaper ||
-	    is_child_reaper(task_pid(p)))
+	if (p->signal->has_child_subreaper || is_child_reaper(task_pid(p)))
 		return 0;
 
 	p->signal->has_child_subreaper = 1;
@@ -2403,7 +2434,7 @@
 	case PR_SET_TIMERSLACK:
 		if (arg2 <= 0)
 			current->timer_slack_ns =
-					current->default_timer_slack_ns;
+				current->default_timer_slack_ns;
 		else
 			current->timer_slack_ns = arg2;
 		break;
@@ -2424,7 +2455,7 @@
 				current->flags &= ~PF_MCE_EARLY;
 			else if (arg3 == PR_MCE_KILL_DEFAULT)
 				current->flags &=
-						~(PF_MCE_EARLY|PF_MCE_PROCESS);
+					~(PF_MCE_EARLY | PF_MCE_PROCESS);
 			else
 				return -EINVAL;
 			break;
@@ -2437,7 +2468,8 @@
 			return -EINVAL;
 		if (current->flags & PF_MCE_PROCESS)
 			error = (current->flags & PF_MCE_EARLY) ?
-				PR_MCE_KILL_EARLY : PR_MCE_KILL_LATE;
+					PR_MCE_KILL_EARLY :
+					      PR_MCE_KILL_LATE;
 		else
 			error = PR_MCE_KILL_DEFAULT;
 		break;
@@ -2445,7 +2477,7 @@
 		error = prctl_set_mm(arg2, arg3, arg4, arg5);
 		break;
 	case PR_GET_TID_ADDRESS:
-		error = prctl_get_tid_address(me, (int __user * __user *)arg2);
+		error = prctl_get_tid_address(me, (int __user *__user *)arg2);
 		break;
 	case PR_SET_CHILD_SUBREAPER:
 		me->signal->is_child_subreaper = !!arg2;
@@ -2560,7 +2592,7 @@
 		break;
 	case PR_SET_SYSCALL_USER_DISPATCH:
 		error = set_syscall_user_dispatch(arg2, arg3, arg4,
-						  (char __user *) arg5);
+						  (char __user *)arg5);
 		break;
 #ifdef CONFIG_SCHED_CORE
 	case PR_SCHED_CORE:
@@ -2681,7 +2713,7 @@
 	u32 totalhigh;
 	u32 freehigh;
 	u32 mem_unit;
-	char _f[20-2*sizeof(u32)-sizeof(int)];
+	char _f[20 - 2 * sizeof(u32) - sizeof(int)];
 };
 
 COMPAT_SYSCALL_DEFINE1(sysinfo, struct compat_sysinfo __user *, info)
